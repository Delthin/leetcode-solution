/**
Áªô‰Ω†‰∏Ä‰∏™Êúâ n ‰∏™ËäÇÁÇπÁöÑ ÊúâÂêëÂ∏¶ÊùÉ ÂõæÔºåËäÇÁÇπÁºñÂè∑‰∏∫ 0 Âà∞ n - 1 „ÄÇÂõæ‰∏≠ÁöÑÂàùÂßãËæπÁî®Êï∞ÁªÑ edges Ë°®Á§∫ÔºåÂÖ∂‰∏≠ edges[i] = [fromi, 
toi, edgeCosti] Ë°®Á§∫‰ªé fromi Âà∞ toi Êúâ‰∏ÄÊù°‰ª£‰ª∑‰∏∫ edgeCosti ÁöÑËæπ„ÄÇ 

 ËØ∑‰Ω†ÂÆûÁé∞‰∏Ä‰∏™ Graph Á±ªÔºö 

 
 Graph(int n, int[][] edges) ÂàùÂßãÂåñÂõæÊúâ n ‰∏™ËäÇÁÇπÔºåÂπ∂ËæìÂÖ•ÂàùÂßãËæπ„ÄÇ 
 addEdge(int[] edge) ÂêëËæπÈõÜ‰∏≠Ê∑ªÂä†‰∏ÄÊù°ËæπÔºåÂÖ∂‰∏≠ edge = [from, to, edgeCost] „ÄÇÊï∞ÊçÆ‰øùËØÅÊ∑ªÂä†ËøôÊù°Ëæπ‰πãÂâçÂØπÂ∫îÁöÑ‰∏§‰∏™ËäÇ
ÁÇπ‰πãÈó¥Ê≤°ÊúâÊúâÂêëËæπ„ÄÇ 
 int shortestPath(int node1, int node2) ËøîÂõû‰ªéËäÇÁÇπ node1 Âà∞ node2 ÁöÑË∑ØÂæÑ ÊúÄÂ∞è ‰ª£‰ª∑„ÄÇÂ¶ÇÊûúË∑ØÂæÑ‰∏çÂ≠òÂú®ÔºåËøîÂõû
 -1 „ÄÇ‰∏ÄÊù°Ë∑ØÂæÑÁöÑ‰ª£‰ª∑ÊòØË∑ØÂæÑ‰∏≠ÊâÄÊúâËæπ‰ª£‰ª∑‰πãÂíå„ÄÇ 
 

 

 Á§∫‰æã 1Ôºö 

 

 ËæìÂÖ•Ôºö
["Graph", "shortestPath", "shortestPath", "addEdge", "shortestPath"]
[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]],
 [0, 3]]
ËæìÂá∫Ôºö
[null, 6, -1, null, 6]

Ëß£ÈáäÔºö
Graph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);
g.shortestPath(3, 2); // ËøîÂõû 6 „ÄÇ‰ªé 3 Âà∞ 2 ÁöÑÊúÄÁü≠Ë∑ØÂæÑÂ¶ÇÁ¨¨‰∏ÄÂπÖÂõæÊâÄÁ§∫Ôºö3 -> 0 -> 1 -> 2 ÔºåÊÄª‰ª£‰ª∑‰∏∫ 3 + 2
 + 1 = 6 „ÄÇ
g.shortestPath(0, 3); // ËøîÂõû -1 „ÄÇÊ≤°Êúâ‰ªé 0 Âà∞ 3 ÁöÑË∑ØÂæÑ„ÄÇ
g.addEdge([1, 3, 4]); // Ê∑ªÂä†‰∏ÄÊù°ËäÇÁÇπ 1 Âà∞ËäÇÁÇπ 3 ÁöÑËæπÔºåÂæóÂà∞Á¨¨‰∫åÂπÖÂõæ„ÄÇ
g.shortestPath(0, 3); // ËøîÂõû 6 „ÄÇ‰ªé 0 Âà∞ 3 ÁöÑÊúÄÁü≠Ë∑ØÂæÑ‰∏∫ 0 -> 1 -> 3 ÔºåÊÄª‰ª£‰ª∑‰∏∫ 2 + 4 = 6 „ÄÇ
 

 

 ÊèêÁ§∫Ôºö 

 
 1 <= n <= 100 
 0 <= edges.length <= n * (n - 1) 
 edges[i].length == edge.length == 3 
 0 <= fromi, toi, from, to, node1, node2 <= n - 1 
 1 <= edgeCosti, edgeCost <= 10‚Å∂ 
 Âõæ‰∏≠‰ªª‰ΩïÊó∂ÂÄôÈÉΩ‰∏ç‰ºöÊúâÈáçËæπÂíåËá™ÁéØ„ÄÇ 
 Ë∞ÉÁî® addEdge Ëá≥Â§ö 100 Ê¨°„ÄÇ 
 Ë∞ÉÁî® shortestPath Ëá≥Â§ö 100 Ê¨°„ÄÇ 
 

 Related Topics Âõæ ËÆæËÆ° ÊúÄÁü≠Ë∑Ø Â†ÜÔºà‰ºòÂÖàÈòüÂàóÔºâ üëç 66 üëé 0

*/
#include <bits/stdc++.h>

using namespace std;
  
namespace solution2642{
//leetcode submit region begin(Prohibit modification and deletion)
class Graph {
public:
    const long long INF = 1e18;
    using PII = pair<long long, int>; // {distance, vertex}
    vector<vector<PII>> adj_weighted;
    Graph(int n, vector<vector<int>>& edges) {
        adj_weighted.resize(n);
        for (auto& edge : edges) {
            adj_weighted[edge[0]].push_back({edge[1], edge[2]});
        }
    }
    
    void addEdge(vector<int> edge) {
        int from = edge[0], to = edge[1], weight = edge[2];
        adj_weighted[from].push_back({to, weight});
    }

    long long dijkstra(int start,int end, const vector<vector<pair<long long, int>>>& adj) {
        int n = adj.size();
        vector<long long> dist(n + 1, INF);
        dist[start] = 0;

        // Â∞èÊ†πÂ†Ü
        priority_queue<PII, vector<PII>, greater<PII>> pq;
        pq.push({0, start});

        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();

            if (d > dist[u]) continue; // Ââ™ÊûùÔºöÂ∑≤ÊâæÂà∞Êõ¥Áü≠ÁöÑË∑ØÂæÑ
            if (u == end) return dist[end]; // Ââ™ÊûùÔºöÂà∞ËææÁõÆÊ†áËäÇÁÇπ

            for (const auto& edge : adj[u]) {
                int v = edge.first;
                int w = edge.second;
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        return dist[end] == INF ? -1 : dist[end]; // Â¶ÇÊûúÂà∞Ëææ‰∏ç‰∫ÜÁõÆÊ†áËäÇÁÇπÔºåËøîÂõû -1
    }

    int shortestPath(int node1, int node2) {
        return dijkstra(node1, node2, adj_weighted);
    }
};

/**
 * Your Graph object will be instantiated and called as such:
 * Graph* obj = new Graph(n, edges);
 * obj->addEdge(edge);
 * int param_2 = obj->shortestPath(node1,node2);
 */
//leetcode submit region end(Prohibit modification and deletion)

}

using namespace solution2642;
int main() {
    Solution solution;

    return 0;
}