//Áªô‰Ω†‰∏Ä‰∏™Êúâ n ‰∏™ËäÇÁÇπÁöÑ ÊúâÂêëÊó†ÁéØÂõæÔºàDAGÔºâÔºåËØ∑‰Ω†ÊâæÂá∫ÊâÄÊúâ‰ªéËäÇÁÇπ 0 Âà∞ËäÇÁÇπ n-1 ÁöÑË∑ØÂæÑÂπ∂ËæìÂá∫Ôºà‰∏çË¶ÅÊ±ÇÊåâÁâπÂÆöÈ°∫Â∫èÔºâ 
//
// 
// graph[i] ÊòØ‰∏Ä‰∏™‰ªéËäÇÁÇπ i ÂèØ‰ª•ËÆøÈóÆÁöÑÊâÄÊúâËäÇÁÇπÁöÑÂàóË°®ÔºàÂç≥‰ªéËäÇÁÇπ i Âà∞ËäÇÁÇπ graph[i][j]Â≠òÂú®‰∏ÄÊù°ÊúâÂêëËæπÔºâ„ÄÇ 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//
// 
//ËæìÂÖ•Ôºögraph = [[1,2],[3],[3],[]]
//ËæìÂá∫Ôºö[[0,1,3],[0,2,3]]
//Ëß£ÈáäÔºöÊúâ‰∏§Êù°Ë∑ØÂæÑ 0 -> 1 -> 3 Âíå 0 -> 2 -> 3
// 
//
// Á§∫‰æã 2Ôºö 
//
// 
//
// 
//ËæìÂÖ•Ôºögraph = [[4,3,1],[3,2,4],[3],[4],[]]
//ËæìÂá∫Ôºö[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// n == graph.length 
// 2 <= n <= 15 
// 0 <= graph[i][j] < n 
// graph[i][j] != iÔºàÂç≥‰∏çÂ≠òÂú®Ëá™ÁéØÔºâ 
// graph[i] ‰∏≠ÁöÑÊâÄÊúâÂÖÉÁ¥† ‰∫í‰∏çÁõ∏Âêå 
// ‰øùËØÅËæìÂÖ•‰∏∫ ÊúâÂêëÊó†ÁéØÂõæÔºàDAGÔºâ 
// 
//
// 
//
// Related Topics Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ Âõæ ÂõûÊ∫Ø üëç 527 üëé 0

#include <bits/stdc++.h>

using namespace std;
  
namespace solution797{
//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
private:
    vector<vector<int>> res;
    vector<int> path;
    void dfs(vector<vector<int>>& graph, int x, int n) {
        if (x == n) {
            res.emplace_back(path);
            return;
        }
        for (auto& y : graph[x]) {
            path.emplace_back(y);
            dfs(graph, y, n);
            path.pop_back();
        }
    }
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        path.emplace_back(0);
        dfs(graph, 0, graph.size() - 1);
        return res;
    }
};
//leetcode submit region end(Prohibit modification and deletion)

}

using namespace solution797;
int main() {
    Solution solution;

    return 0;
}